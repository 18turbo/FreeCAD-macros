# -*- coding: utf-8 -*-

__Version__ = '0.5'
__Date__ = '2021-07-17'
__License__ = 'LGPL-3.0-or-later'
__Web__ = ''
__Wiki__ = 'README.md'
__Name__ = 'Objects To Python'
__Comment__ = 'Exports objects from a FreeCAD project to a python script'
__Author__ = 'Christi'
__Icon__ = ''
__Help__ = ''
__Status__ = ''
__Requires__ = 'FreeCAD >= 0.19'
__Communication__ = 'https://forum.freecadweb.org/viewtopic.php?f=22&t=34612'
__Files__ = 'ObjectsToPython/README.md,ObjectsToPython/ObjectsToPython.ui'

VERSION_STRING = __Name__ + ' Macro v' + __Version__


import FreeCAD as app
import FreeCADGui as gui
import Part
import re
import sys
from FreeCAD import Vector

               
def exportObjectsToPython(doc = app.activeDocument()):        
    addScriptFunc('from FreeCAD import Vector, Placement, Rotation')
    addScriptFunc('import Sketcher');
    addScriptFunc('import Part');
    addScriptFunc('import FreeCAD as app');
    objectlist = []
    skip_objects = [('App::Line', 'X_Axis'), ('App::Line', 'Y_Axis'), ('App::Line', 'Z_Axis'),
                   ('App::Plane', 'XY_Plane'), ('App::Plane', 'XZ_Plane'), ('App::Plane', 'YZ_Plane'),
                   ('App::Origin', 'Origin')] 
    
    selection = FreeCADGui.Selection.getSelection() 
    if not selection:
        selection = doc.Objects
    else:
        expandSelection(selection)
        
    for obj in doc.Objects:  
        objectlist.append(doc.getObject(obj.Name)) 
         
    for obj in selection:    
        if obj.TypeId == 'Sketcher::SketchObject': 
            addScriptFunc('')
            addScriptFunc("def createSketch_%s(doc):"%varname(obj))
            addObject(doc, obj, objectlist)
            addScript('return ' + varname(obj))
        
    addScriptFunc('')
    addScriptFunc('')
    addScriptFunc("def make_%s():"%doc.Name)
    if not selection:
        addScript("doc = app.newDocument('%s')"%doc.Name)
    else:
        addScript('doc = app.activeDocument()')
    
    for obj in selection: 
        if (obj.TypeId, obj.Label) not in skip_objects:
            addScriptFunc('')
            if obj.TypeId == 'Sketcher::SketchObject':
                addScript(varname(obj) + " = createSketch_%s(doc)"%varname(obj))
            else:
                addObject(doc, obj, objectlist)            
                
    for obj in selection: 
        if obj.TypeId == 'PartDesign::Body':
            addScriptFunc('')
            addScript("%s.Group = %s_Group"%(varname(obj), varname(obj))) 
            if obj.Tip:
                addScript("%s.Tip = %s"%(varname(obj), varname(obj.Tip))) 
            
    addScript('') 
    addScript('doc.recompute()') 
    addScriptFunc('')
    addScriptFunc('')
    addScriptFunc("make_%s()"%doc.Name)
        
  
def varname(obj):
    forbidden = [' ', '.', ',', '%', '+', '-', '*', '/','(',')','[',']','=','"',"'"]
    l = obj.Label
    for f in forbidden:
        l = l.replace(f, '_')
        
    if l[0].isdigit(): l = '_' + l
    return l
      
def addScript(line):
    dialog.form.textEdit.append('\t' + line)
    
def addScriptFunc(line):
    dialog.form.textEdit.append(line)
    
def expandSelection(selection):    
    addthis = []     
    for obj in selection:    
        if hasattr(obj, 'Group'):
            addthis += obj.Group
        if hasattr(obj, 'Source'):
            addthis.append(obj.Source)
        if hasattr(obj, 'Links'):
            addthis += obj.Links
            
    addcount = 0
    for a in addthis:
        if (not a in selection) and hasattr(obj, 'Name') and hasattr(obj, 'TypeId'):
            selection.insert(0, a)
            addcount = addcount + 1
            
    if addcount > 0:
        expandSelection(selection)
            

def addObject(doc, obj, objectlist): 
    objname = varname(obj)
    addScript("%s = doc.addObject('%s', '%s')"%(objname, obj.TypeId, objname))
    defaultobj = doc.addObject(obj.TypeId, obj.Name + 'Default')
    addProperties(obj, objname, defaultobj, objectlist)
    addProperties(obj.ViewObject, objname + '.ViewObject', defaultobj.ViewObject, [])                      
    doc.removeObject(obj.Name + 'Default')      
    
    
def addProperties(obj, objname, refobj, objectlist):
    skipProperties = ['Label', 'Shape', 'Proxy', 'AddSubShape', 'FullyConstrained']
    skipObjProp = [('Sketcher::SketchObject', 'Geometry'), ('Sketcher::SketchObject', 'Constraints'),
        ('PartDesign::Body', 'Origin'), ('PartDesign::Body', 'Tip')]
    
    if obj.TypeId == 'Spreadsheet::Sheet':
        addSpreadsheet(obj, objname)
        return
    
    if obj.TypeId == 'Sketcher::SketchObject':
        addSketch(obj, objname)

    for propname in obj.PropertiesList:
        if (not propname in skipProperties) and (not (obj.TypeId, propname) in skipObjProp):
            prop = obj.getPropertyByName(propname)  
            val = objectToText(prop, objectlist)
            
            try:
                refprop = refobj.getPropertyByName(propname)
                defaultval = objectToText(refprop, objectlist)
            except:
                defaultval = None       
                
            if propname == 'Support':
                val = val.replace('XY_Plane', 'doc.XY_Plane')
                val = val.replace('XZ_Plane', 'doc.XZ_Plane')
                val = val.replace('YZ_Plane', 'doc.YZ_Plane')
                
            if propname == 'ExpressionEngine':
                for expression in prop:
                    addScript(objname + ".setExpression" + str(expression).replace('<', '').replace('>',''))

            elif propname == '_Body':
                addScript("%s_Group.append(%s)"%(val, objname))
                          
            elif (obj.TypeId, propname) == ('PartDesign::Body', 'Group'):
                addScript("%s_Group = []"%(objname))
                                                
            elif (obj.TypeId, propname) == ('App::Part', 'Group'):
                proplist = []
                for pn in prop:
                    proplist.append(varname(pn))
                    
                addScript(objname + '.Group = ' + str(proplist))
                                                     
            elif objectToText(prop, objectlist) is not None:   
                if val != defaultval:        
                    addScript("%s.%s = %s"%(objname, propname, val))   
                                      
                                                                                                                            
def objectToText(obj, objectlist = []):    
    if obj in objectlist:
        return obj.Label
    
    else:
        if hasattr(obj, 'Value') and hasattr(obj, 'Unit'):  # how can I test if type(obj) is Base.Quantity ?
            return str(obj.Value)
        else:     
            if isinstance(obj, str):
                return "'" + str(obj) + "'"
                
            if isinstance(obj, bool):
                if obj:
                    return 'True'
                else:
                    return 'False'
            
            if isinstance(obj, int):
                return str(obj)
    
            if isinstance(obj, float):
                return floatstr(obj)                                      
            
            if isinstance(obj, Placement):
                return "Placement(%s, %s)"%(objectToText(obj.Base), objectToText(obj.Rotation))
            
            if isinstance(obj, Part.Point):
                return "Part.Point(Vector(%s, %s, %s))"%(floatstr(obj.X), floatstr(obj.Y), floatstr(obj.Z))
            
            if isinstance(obj, Part.LineSegment):
                return "Part.LineSegment(%s, %s)"%(obj.StartPoint, obj.EndPoint)
            
            if isinstance(obj, Part.Circle):
                return "Part.Circle(%s, %s, %s)"%(vecstr(obj.Center), obj.Axis, floatstr(obj.Radius))
            
            if isinstance(obj, Part.ArcOfCircle):
                #return "Part.ArcOfCircle(%s, %s, %s)"%(obj.Center, obj.StartPoint, obj.EndPoint)
                return "Part.ArcOfCircle(%s, %s, %s)"%(objectToText(obj.Circle), obj.FirstParameter, obj.LastParameter)
            
            if isinstance(obj, Part.Ellipse):
                return "Part.Ellipse(%s, %s, %s)"%(vecstr(obj.Center), obj.MajorRadius, obj.MinorRadius)
            
            if isinstance(obj, Part.BSplineCurve):
                poles = ''
                komma = False
                for p in obj.getPoles():
                    if komma:
                        poles += ', '
                    poles += vecstr(p)
                    komma = True
                    
                return "Part.BSplineCurve([%s])"%poles
                
            if isinstance(obj, Part.Parabola):
                return "Part.Parabola(%s, %s, %s)"%(vecstr(obj.Focus), vecstr(obj.Location), vecstr(obj.Axis))
                
            if isinstance(obj, Part.Hyperbola):
                return "Part.Hyperbola(%s, %s, %s)"%(vecstr(obj.Center), obj.MajorRadius, obj.MinorRadius)
                
            if isinstance(obj, Part.ArcOfEllipse):
                return "Part.ArcOfEllipse(%s, %s, %s)"%(objectToText(obj.Ellipse), obj.FirstParameter, obj.LastParameter)
            
            if isinstance(obj, Part.ArcOfParabola):
                return "Part.ArcOfParabola(%s, %s, %s)"%(objectToText(obj.Parabola), obj.FirstParameter, obj.LastParameter)
                
            if isinstance(obj, Part.ArcOfHyperbola):
                return "Part.ArcOfHyperbola(%s, %s, %s)"%(objectToText(obj.Hyperbola), obj.FirstParameter, obj.LastParameter)
            
            if isinstance(obj, Vector):
                return vecstr(obj)

            liststart = ''
            if isinstance(obj, list):
                liststart = '['
                listend = ']'
                
            if isinstance(obj, tuple):
                liststart = '('
                listend = ')'
                
            if liststart != '':
                sline = liststart;
                comma = False
                for listele in obj:
                    if comma:
                        sline = sline + ', '
                    else:
                        comma = True                
                
                    val = objectToText(listele, objectlist)
                    if val is not None:
                        sline = sline + val
                    
                sline += listend;
                return sline                  
            
            stringobj = str(obj)                           
            return stringobj
        
    
def addSketch(obj, objname): 
    prop = obj.getPropertyByName('Geometry')
    gflist = obj.GeometryFacadeList
 
    n = 0
    exposing = 0
    exposed = []
    for geo in prop:
        objstr = objectToText(geo)
        
        if exposing > 0:
            exposed.append(n)
            exposing = exposing - 1
        else:
            addScript("%s.addGeometry(%s)"%(objname, objstr))           
            if gflist[n].Construction:
                addScript("%s.toggleConstruction(%d)"%(objname, n))
            
        if isinstance(geo, Part.ArcOfParabola):
            addScript("%s.exposeInternalGeometry(%d)"%(objname, n))
            exposing = 2
                
        if isinstance(geo, Part.ArcOfEllipse):
            addScript("%s.exposeInternalGeometry(%d)"%(objname, n))
            exposing = 4
            
        if isinstance(geo, Part.ArcOfHyperbola):
            addScript("%s.exposeInternalGeometry(%d)"%(objname, n))
            exposing = 3
            
        n = n + 1
    
    splinecount = 0
    concount = 0
    prop = obj.getPropertyByName('Constraints')
    for con in obj.Constraints:
        if not concount in exposed:
            conargs = ''
            contype = con.Type
            if con.Type == 'Coincident':
                conargs = "%d, %d, %d, %d"%(con.First, con.FirstPos, con.Second, con.SecondPos)
            elif con.Type == 'PointOnObject':
                conargs = "%d, %d, %d"%(con.First, con.FirstPos, con.Second)
            elif con.Type == 'Vertical':
                conargs = str(con.First)
            elif con.Type == 'Horizontal':
                conargs = str(con.First)
            elif con.Type == 'Parallel':
                conargs = "%d, %d"%(con.First, con.Second)
            elif con.Type == 'Perpendicular':
                conargs = "%d, %d"%(con.First, con.Second)
            elif con.Type == 'Tangent':
                if con.Second == -2000:
                    conargs = "%d, %d"%(con.First, con.FirstPos)
                elif con.Third == -2000:
                    conargs = "%d, %d, %d, %d"%(con.First, con.FirstPos, con.Second, con.SecondPos)
                else:
                    contype = 'TangentViaPoint'
                    conargs = "%d, %d, %d, %d"%(con.First, con.Second, con.Third, con.ThirdPos)
            elif con.Type == 'Equal':
                conargs = "%d, %d"%(con.First, con.Second)
            elif con.Type == 'Symmetric':
                conargs = "%d, %d, %d, %d, %d, %d"%(con.First, con.FirstPos, con.Second, con.SecondPos, con.Third, con.ThirdPos)
            elif con.Type == 'Block':
                conargs = str(con.First)
            elif con.Type == 'Distance':
                if con.Second == -2000:
                    conargs = "%d, %s"%(con.First, floatstr(con.Value))
                else:
                    conargs = "%d, %d, %d, %d, %s"%(con.First, con.FirstPos, con.Second, con.SecondPos, floatstr(con.Value))
            elif con.Type == 'DistanceX' or con.Type == 'DistanceY':
                if con.Second == -2000:
                    conargs = "%d, %d, %s"%(con.First, con.FirstPos, floatstr(con.Value))
                else:
                    conargs = "%d, %d, %d, %d, %s"%(con.First, con.FirstPos, con.Second, con.SecondPos, floatstr(con.Value))
            elif con.Type == 'Radius':
                conargs = "%d, %s"%(con.First, floatstr(con.Value))
                splinecount = 0
            elif con.Type == 'Angle':
                conargs = "%d, %d, %d, %d, %s"%(con.First, con.FirstPos, con.Second, con.SecondPos, floatstr(con.Value))
            elif con.Type == 'InternalAlignment':
                if con.Second > con.First:
                    contype = 'InternalAlignment:Sketcher::BSplineControlPoint'
                    conargs = "%d, %d, %d, %d"%(con.First, con.FirstPos, con.Second, splinecount)
                    splineindex = con.Second
                    splinecount = splinecount + 1
                else:
                    conargs = None
    
            if conargs is not None:
                addScript("%s.addConstraint(Sketcher.Constraint('%s', %s))"%(objname, contype, conargs))
                
            if con.Name != "":
                addScript("%s.renameConstraint(%d, u'%s')"%(objname, concount, con.Name))
            
        concount = concount + 1
    
                                 
def addSpreadsheet(obj, objname): 
    for propname in obj.PropertiesList:    
        match = re.search('[A-Z]+[0-9]+', propname)
        if match:
            prop = obj.getPropertyByName(propname)
            val = objectToText(prop)
            addScript("%s.set('%s', '%s')"%(objname, propname, val.replace("'", '')))  
            alias = obj.getAlias(propname)
            if alias is not None:
                addScript("%s.setAlias('%s', '%s')"%(objname, propname, alias))
    
    addScript('doc.recompute()')   
      
def floatstr(f):
    return '{:.2f}'.format(f)
     
def vecstr(v):
    return 'Vector(' + floatstr(v.x) + ', ' + floatstr(v.y) + ', ' + floatstr(v.z) + ')'

class O2PDialog:
    """Show a dialog for BoxCreator"""
    def __init__(self):
        self.ui_file = os.path.join(app.getUserMacroDir(True), 'ObjectsToPython/ObjectsToPython.ui')
        f, w = gui.PySideUic.loadUiType(self.ui_file)
        self.form = f()
        self.widget = w()
        self.form.setupUi(self.widget)
        self.widget.show()
        self.form.pushButtonClose.pressed.connect(self.form_Close)

    def form_Close(self):
	    del self.form
	    del self.widget
  
dialog = O2PDialog()     
exportObjectsToPython()
